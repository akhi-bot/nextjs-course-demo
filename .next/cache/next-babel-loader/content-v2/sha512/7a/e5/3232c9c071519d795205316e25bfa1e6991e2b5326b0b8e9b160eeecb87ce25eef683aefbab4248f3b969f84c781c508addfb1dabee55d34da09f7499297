{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\React-The_Complete_Guide_practice\\\\19_Introduction_to_NextJs\\\\Practice_project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from 'next/head';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://userName3:7830824227@cluster0.cmune.mongodb.net/meetup?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: \"blocking\",\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://userName3:7830824227@cluster0.cmune.mongodb.net/meetup?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(selectedMeetup);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        image: selectedMeetup.image,\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["E:/React-The_Complete_Guide_practice/19_Introduction_to_NextJs/Practice_project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","Fragment","Head","MeetupDetails","props","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","console","log","id"],"mappings":"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","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nimport { Fragment } from \"react\";\r\nimport Head from 'next/head'\r\nconst MeetupDetails = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{props.meetupData.title}</title>\r\n        <meta name=\"description\" content= {props.meetupData.description} />\r\n      </Head>\r\n      <MeetupDetail\r\n        image= {props.meetupData.image}\r\n        title= {props.meetupData.title}\r\n        address= {props.meetupData.address}\r\n        description= {props.meetupData.description}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths = async () => {\r\n  const client = await MongoClient.connect('mongodb+srv://userName3:7830824227@cluster0.cmune.mongodb.net/meetup?retryWrites=true&w=majority')\r\n\r\n  const db = client.db()\r\n\r\n  const meetupCollection = db.collection('meetup');\r\n\r\n  const meetups = await meetupCollection.find({}, {_id: 1}).toArray();\r\n  client.close()\r\n  return {\r\n    fallback: \"blocking\",\r\n    paths: meetups.map(meetup => ({params: {meetupId: meetup._id.toString()}}))\r\n  };\r\n};\r\n\r\nexport const getStaticProps = async (context) => {\r\n  // fetch data for a single meetup\r\n\r\n  const meetupId = context.params.meetupId;\r\n  \r\n  const client = await MongoClient.connect('mongodb+srv://userName3:7830824227@cluster0.cmune.mongodb.net/meetup?retryWrites=true&w=majority')\r\n\r\n  const db = client.db()\r\n\r\n  const meetupCollection = db.collection('meetup');\r\n\r\n  const selectedMeetup = await meetupCollection.findOne({_id: ObjectId(meetupId)})\r\n   console.log(selectedMeetup)\r\n  client.close()\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        image: selectedMeetup.image,\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        description: selectedMeetup.description\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}